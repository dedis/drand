// Code generated by protoc-gen-go. DO NOT EDIT.
// source: control/control.proto

/*
Package control is a generated protocol buffer package.

It is generated from these files:
	control/control.proto

It has these top-level messages:
	DKGRequest
	DKGResponse
	ReshareRequest
	GroupInfo
	ReshareResponse
	ShareRequest
	ShareResponse
	Ping
	Pong
	PublicKeyRequest
	PublicKeyResponse
	PrivateKeyRequest
	PrivateKeyResponse
	CokeyRequest
	CokeyResponse
	GroupRequest
	GroupResponse
*/
package control

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import element "github.com/dedis/drand/protobuf/crypto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DKGRequest struct {
	DkgGroup *GroupInfo `protobuf:"bytes,1,opt,name=dkg_group,json=dkgGroup" json:"dkg_group,omitempty"`
	IsLeader bool       `protobuf:"varint,2,opt,name=is_leader,json=isLeader" json:"is_leader,omitempty"`
}

func (m *DKGRequest) Reset()                    { *m = DKGRequest{} }
func (m *DKGRequest) String() string            { return proto.CompactTextString(m) }
func (*DKGRequest) ProtoMessage()               {}
func (*DKGRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *DKGRequest) GetDkgGroup() *GroupInfo {
	if m != nil {
		return m.DkgGroup
	}
	return nil
}

func (m *DKGRequest) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

type DKGResponse struct {
}

func (m *DKGResponse) Reset()                    { *m = DKGResponse{} }
func (m *DKGResponse) String() string            { return proto.CompactTextString(m) }
func (*DKGResponse) ProtoMessage()               {}
func (*DKGResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ReshareRequest contains references to the old and new group to perform the
// resharing protocol.
type ReshareRequest struct {
	// Old group that needs to issue the shares for the new group
	// NOTE: It can be empty / nil. In that case, the drand node will try to
	// load the group he belongs to at the moment, if any, and use it as the old
	// group.
	Old      *GroupInfo `protobuf:"bytes,1,opt,name=old" json:"old,omitempty"`
	New      *GroupInfo `protobuf:"bytes,2,opt,name=new" json:"new,omitempty"`
	IsLeader bool       `protobuf:"varint,3,opt,name=is_leader,json=isLeader" json:"is_leader,omitempty"`
}

func (m *ReshareRequest) Reset()                    { *m = ReshareRequest{} }
func (m *ReshareRequest) String() string            { return proto.CompactTextString(m) }
func (*ReshareRequest) ProtoMessage()               {}
func (*ReshareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReshareRequest) GetOld() *GroupInfo {
	if m != nil {
		return m.Old
	}
	return nil
}

func (m *ReshareRequest) GetNew() *GroupInfo {
	if m != nil {
		return m.New
	}
	return nil
}

func (m *ReshareRequest) GetIsLeader() bool {
	if m != nil {
		return m.IsLeader
	}
	return false
}

type GroupInfo struct {
	// Types that are valid to be assigned to Location:
	//	*GroupInfo_Path
	//	*GroupInfo_Url
	Location isGroupInfo_Location `protobuf_oneof:"location"`
}

func (m *GroupInfo) Reset()                    { *m = GroupInfo{} }
func (m *GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()               {}
func (*GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type isGroupInfo_Location interface {
	isGroupInfo_Location()
}

type GroupInfo_Path struct {
	Path string `protobuf:"bytes,1,opt,name=path,oneof"`
}
type GroupInfo_Url struct {
	Url string `protobuf:"bytes,2,opt,name=url,oneof"`
}

func (*GroupInfo_Path) isGroupInfo_Location() {}
func (*GroupInfo_Url) isGroupInfo_Location()  {}

func (m *GroupInfo) GetLocation() isGroupInfo_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *GroupInfo) GetPath() string {
	if x, ok := m.GetLocation().(*GroupInfo_Path); ok {
		return x.Path
	}
	return ""
}

func (m *GroupInfo) GetUrl() string {
	if x, ok := m.GetLocation().(*GroupInfo_Url); ok {
		return x.Url
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*GroupInfo) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _GroupInfo_OneofMarshaler, _GroupInfo_OneofUnmarshaler, _GroupInfo_OneofSizer, []interface{}{
		(*GroupInfo_Path)(nil),
		(*GroupInfo_Url)(nil),
	}
}

func _GroupInfo_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*GroupInfo)
	// location
	switch x := m.Location.(type) {
	case *GroupInfo_Path:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Path)
	case *GroupInfo_Url:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Url)
	case nil:
	default:
		return fmt.Errorf("GroupInfo.Location has unexpected type %T", x)
	}
	return nil
}

func _GroupInfo_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*GroupInfo)
	switch tag {
	case 1: // location.path
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Location = &GroupInfo_Path{x}
		return true, err
	case 2: // location.url
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Location = &GroupInfo_Url{x}
		return true, err
	default:
		return false, nil
	}
}

func _GroupInfo_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*GroupInfo)
	// location
	switch x := m.Location.(type) {
	case *GroupInfo_Path:
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Path)))
		n += len(x.Path)
	case *GroupInfo_Url:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Url)))
		n += len(x.Url)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ReshareResponse struct {
}

func (m *ReshareResponse) Reset()                    { *m = ReshareResponse{} }
func (m *ReshareResponse) String() string            { return proto.CompactTextString(m) }
func (*ReshareResponse) ProtoMessage()               {}
func (*ReshareResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// ShareRequest requests the private share of a drand node
type ShareRequest struct {
}

func (m *ShareRequest) Reset()                    { *m = ShareRequest{} }
func (m *ShareRequest) String() string            { return proto.CompactTextString(m) }
func (*ShareRequest) ProtoMessage()               {}
func (*ShareRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// ShareResponse holds the private share of a drand node
type ShareResponse struct {
	Index uint32          `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Share *element.Scalar `protobuf:"bytes,2,opt,name=share" json:"share,omitempty"`
}

func (m *ShareResponse) Reset()                    { *m = ShareResponse{} }
func (m *ShareResponse) String() string            { return proto.CompactTextString(m) }
func (*ShareResponse) ProtoMessage()               {}
func (*ShareResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ShareResponse) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *ShareResponse) GetShare() *element.Scalar {
	if m != nil {
		return m.Share
	}
	return nil
}

type Ping struct {
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type Pong struct {
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

// PublicKeyRequest requests the public key of a drand node
type PublicKeyRequest struct {
}

func (m *PublicKeyRequest) Reset()                    { *m = PublicKeyRequest{} }
func (m *PublicKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*PublicKeyRequest) ProtoMessage()               {}
func (*PublicKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// PublicKeyResponse holds the public key of a drand node
type PublicKeyResponse struct {
	PubKey *element.Point `protobuf:"bytes,1,opt,name=pubKey" json:"pubKey,omitempty"`
}

func (m *PublicKeyResponse) Reset()                    { *m = PublicKeyResponse{} }
func (m *PublicKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*PublicKeyResponse) ProtoMessage()               {}
func (*PublicKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *PublicKeyResponse) GetPubKey() *element.Point {
	if m != nil {
		return m.PubKey
	}
	return nil
}

// PrivateKeyRequest requests the private key of a drand node
type PrivateKeyRequest struct {
}

func (m *PrivateKeyRequest) Reset()                    { *m = PrivateKeyRequest{} }
func (m *PrivateKeyRequest) String() string            { return proto.CompactTextString(m) }
func (*PrivateKeyRequest) ProtoMessage()               {}
func (*PrivateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

// PrivateKeyResponse holds the private key of a drand node
type PrivateKeyResponse struct {
	PriKey *element.Scalar `protobuf:"bytes,1,opt,name=priKey" json:"priKey,omitempty"`
}

func (m *PrivateKeyResponse) Reset()                    { *m = PrivateKeyResponse{} }
func (m *PrivateKeyResponse) String() string            { return proto.CompactTextString(m) }
func (*PrivateKeyResponse) ProtoMessage()               {}
func (*PrivateKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *PrivateKeyResponse) GetPriKey() *element.Scalar {
	if m != nil {
		return m.PriKey
	}
	return nil
}

// CokeyRequest requests the collective key of a drand node
type CokeyRequest struct {
}

func (m *CokeyRequest) Reset()                    { *m = CokeyRequest{} }
func (m *CokeyRequest) String() string            { return proto.CompactTextString(m) }
func (*CokeyRequest) ProtoMessage()               {}
func (*CokeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// CokeyResponse holds the collective key of a drand node
type CokeyResponse struct {
	CoKey *element.Point `protobuf:"bytes,1,opt,name=coKey" json:"coKey,omitempty"`
}

func (m *CokeyResponse) Reset()                    { *m = CokeyResponse{} }
func (m *CokeyResponse) String() string            { return proto.CompactTextString(m) }
func (*CokeyResponse) ProtoMessage()               {}
func (*CokeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CokeyResponse) GetCoKey() *element.Point {
	if m != nil {
		return m.CoKey
	}
	return nil
}

type GroupRequest struct {
}

func (m *GroupRequest) Reset()                    { *m = GroupRequest{} }
func (m *GroupRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupRequest) ProtoMessage()               {}
func (*GroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type GroupResponse struct {
	// TOML-encoded group file
	Group string `protobuf:"bytes,1,opt,name=Group" json:"Group,omitempty"`
}

func (m *GroupResponse) Reset()                    { *m = GroupResponse{} }
func (m *GroupResponse) String() string            { return proto.CompactTextString(m) }
func (*GroupResponse) ProtoMessage()               {}
func (*GroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *GroupResponse) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func init() {
	proto.RegisterType((*DKGRequest)(nil), "control.DKGRequest")
	proto.RegisterType((*DKGResponse)(nil), "control.DKGResponse")
	proto.RegisterType((*ReshareRequest)(nil), "control.ReshareRequest")
	proto.RegisterType((*GroupInfo)(nil), "control.GroupInfo")
	proto.RegisterType((*ReshareResponse)(nil), "control.ReshareResponse")
	proto.RegisterType((*ShareRequest)(nil), "control.ShareRequest")
	proto.RegisterType((*ShareResponse)(nil), "control.ShareResponse")
	proto.RegisterType((*Ping)(nil), "control.Ping")
	proto.RegisterType((*Pong)(nil), "control.Pong")
	proto.RegisterType((*PublicKeyRequest)(nil), "control.PublicKeyRequest")
	proto.RegisterType((*PublicKeyResponse)(nil), "control.PublicKeyResponse")
	proto.RegisterType((*PrivateKeyRequest)(nil), "control.PrivateKeyRequest")
	proto.RegisterType((*PrivateKeyResponse)(nil), "control.PrivateKeyResponse")
	proto.RegisterType((*CokeyRequest)(nil), "control.CokeyRequest")
	proto.RegisterType((*CokeyResponse)(nil), "control.CokeyResponse")
	proto.RegisterType((*GroupRequest)(nil), "control.GroupRequest")
	proto.RegisterType((*GroupResponse)(nil), "control.GroupResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Control service

type ControlClient interface {
	// PingPong returns an empty message. Purpose is to test the control port.
	PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// InitDKG sends information to daemon to start a fresh DKG protocol
	InitDKG(ctx context.Context, in *DKGRequest, opts ...grpc.CallOption) (*DKGResponse, error)
	// InitReshares sends all informations so that the drand node knows how to
	// proceeed during the next resharing protocol.
	InitReshare(ctx context.Context, in *ReshareRequest, opts ...grpc.CallOption) (*ReshareResponse, error)
	// Share returns the current private share used by the node
	Share(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareResponse, error)
	// PublicKey returns the longterm public key of the drand node
	PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error)
	// PrivateKey returns the longterm private key of the drand node
	PrivateKey(ctx context.Context, in *PrivateKeyRequest, opts ...grpc.CallOption) (*PrivateKeyResponse, error)
	// CollectiveKey returns the distributed public key used by the node
	CollectiveKey(ctx context.Context, in *CokeyRequest, opts ...grpc.CallOption) (*CokeyResponse, error)
	// Group returns the current group file used
	Group(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error)
}

type controlClient struct {
	cc *grpc.ClientConn
}

func NewControlClient(cc *grpc.ClientConn) ControlClient {
	return &controlClient{cc}
}

func (c *controlClient) PingPong(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/control.Control/PingPong", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) InitDKG(ctx context.Context, in *DKGRequest, opts ...grpc.CallOption) (*DKGResponse, error) {
	out := new(DKGResponse)
	err := grpc.Invoke(ctx, "/control.Control/InitDKG", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) InitReshare(ctx context.Context, in *ReshareRequest, opts ...grpc.CallOption) (*ReshareResponse, error) {
	out := new(ReshareResponse)
	err := grpc.Invoke(ctx, "/control.Control/InitReshare", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) Share(ctx context.Context, in *ShareRequest, opts ...grpc.CallOption) (*ShareResponse, error) {
	out := new(ShareResponse)
	err := grpc.Invoke(ctx, "/control.Control/Share", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) PublicKey(ctx context.Context, in *PublicKeyRequest, opts ...grpc.CallOption) (*PublicKeyResponse, error) {
	out := new(PublicKeyResponse)
	err := grpc.Invoke(ctx, "/control.Control/PublicKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) PrivateKey(ctx context.Context, in *PrivateKeyRequest, opts ...grpc.CallOption) (*PrivateKeyResponse, error) {
	out := new(PrivateKeyResponse)
	err := grpc.Invoke(ctx, "/control.Control/PrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) CollectiveKey(ctx context.Context, in *CokeyRequest, opts ...grpc.CallOption) (*CokeyResponse, error) {
	out := new(CokeyResponse)
	err := grpc.Invoke(ctx, "/control.Control/CollectiveKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlClient) Group(ctx context.Context, in *GroupRequest, opts ...grpc.CallOption) (*GroupResponse, error) {
	out := new(GroupResponse)
	err := grpc.Invoke(ctx, "/control.Control/Group", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Control service

type ControlServer interface {
	// PingPong returns an empty message. Purpose is to test the control port.
	PingPong(context.Context, *Ping) (*Pong, error)
	// InitDKG sends information to daemon to start a fresh DKG protocol
	InitDKG(context.Context, *DKGRequest) (*DKGResponse, error)
	// InitReshares sends all informations so that the drand node knows how to
	// proceeed during the next resharing protocol.
	InitReshare(context.Context, *ReshareRequest) (*ReshareResponse, error)
	// Share returns the current private share used by the node
	Share(context.Context, *ShareRequest) (*ShareResponse, error)
	// PublicKey returns the longterm public key of the drand node
	PublicKey(context.Context, *PublicKeyRequest) (*PublicKeyResponse, error)
	// PrivateKey returns the longterm private key of the drand node
	PrivateKey(context.Context, *PrivateKeyRequest) (*PrivateKeyResponse, error)
	// CollectiveKey returns the distributed public key used by the node
	CollectiveKey(context.Context, *CokeyRequest) (*CokeyResponse, error)
	// Group returns the current group file used
	Group(context.Context, *GroupRequest) (*GroupResponse, error)
}

func RegisterControlServer(s *grpc.Server, srv ControlServer) {
	s.RegisterService(&_Control_serviceDesc, srv)
}

func _Control_PingPong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PingPong(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.Control/PingPong",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PingPong(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_InitDKG_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DKGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).InitDKG(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.Control/InitDKG",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).InitDKG(ctx, req.(*DKGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_InitReshare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReshareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).InitReshare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.Control/InitReshare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).InitReshare(ctx, req.(*ReshareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_Share_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).Share(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.Control/Share",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).Share(ctx, req.(*ShareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_PublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.Control/PublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PublicKey(ctx, req.(*PublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_PrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).PrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.Control/PrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).PrivateKey(ctx, req.(*PrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_CollectiveKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CokeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).CollectiveKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.Control/CollectiveKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).CollectiveKey(ctx, req.(*CokeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Control_Group_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlServer).Group(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control.Control/Group",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlServer).Group(ctx, req.(*GroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Control_serviceDesc = grpc.ServiceDesc{
	ServiceName: "control.Control",
	HandlerType: (*ControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingPong",
			Handler:    _Control_PingPong_Handler,
		},
		{
			MethodName: "InitDKG",
			Handler:    _Control_InitDKG_Handler,
		},
		{
			MethodName: "InitReshare",
			Handler:    _Control_InitReshare_Handler,
		},
		{
			MethodName: "Share",
			Handler:    _Control_Share_Handler,
		},
		{
			MethodName: "PublicKey",
			Handler:    _Control_PublicKey_Handler,
		},
		{
			MethodName: "PrivateKey",
			Handler:    _Control_PrivateKey_Handler,
		},
		{
			MethodName: "CollectiveKey",
			Handler:    _Control_CollectiveKey_Handler,
		},
		{
			MethodName: "Group",
			Handler:    _Control_Group_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control/control.proto",
}

func init() { proto.RegisterFile("control/control.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 585 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x41, 0x4f, 0xdb, 0x4c,
	0x10, 0x0d, 0x5f, 0x48, 0x88, 0x87, 0xcf, 0xd0, 0x2c, 0x49, 0x9b, 0x9a, 0x0b, 0xb2, 0xa0, 0xd0,
	0x1e, 0x62, 0x89, 0xaa, 0x55, 0xa5, 0xaa, 0x52, 0x1b, 0x22, 0xa5, 0x28, 0x1c, 0x22, 0xe7, 0xc6,
	0x05, 0x39, 0xf6, 0xe2, 0xac, 0x62, 0x76, 0x5d, 0x7b, 0x0d, 0xcd, 0x1f, 0xef, 0xb9, 0xda, 0xf5,
	0x7a, 0x6d, 0x27, 0xd0, 0x93, 0xf5, 0xe6, 0xcd, 0xbe, 0xd9, 0x99, 0x79, 0x5e, 0xe8, 0xfb, 0x8c,
	0xf2, 0x84, 0x45, 0x8e, 0xfa, 0x0e, 0xe3, 0x84, 0x71, 0x86, 0xf6, 0x14, 0xb4, 0x7a, 0x7e, 0xb2,
	0x8e, 0x39, 0x73, 0x70, 0x84, 0x1f, 0x30, 0xe5, 0x39, 0x6d, 0xdf, 0x02, 0x8c, 0xa7, 0x13, 0x17,
	0xff, 0xca, 0x70, 0xca, 0x91, 0x03, 0x46, 0xb0, 0x0a, 0xef, 0xc2, 0x84, 0x65, 0xf1, 0x60, 0xe7,
	0x64, 0xe7, 0x62, 0xff, 0x12, 0x0d, 0x0b, 0xbd, 0x89, 0x88, 0x5e, 0xd3, 0x7b, 0xe6, 0x76, 0x82,
	0x55, 0x28, 0x11, 0x3a, 0x06, 0x83, 0xa4, 0x77, 0x11, 0xf6, 0x02, 0x9c, 0x0c, 0xfe, 0x3b, 0xd9,
	0xb9, 0xe8, 0xb8, 0x1d, 0x92, 0xde, 0x48, 0x6c, 0x9b, 0xb0, 0x2f, 0xb5, 0xd3, 0x98, 0xd1, 0x14,
	0xdb, 0x6b, 0x38, 0x70, 0x71, 0xba, 0xf4, 0x12, 0x5c, 0x94, 0x3b, 0x85, 0x26, 0x8b, 0x82, 0x7f,
	0x14, 0x12, 0xb4, 0xc8, 0xa2, 0xf8, 0x49, 0xaa, 0xbf, 0x90, 0x45, 0xf1, 0x53, 0xfd, 0x26, 0xcd,
	0x8d, 0x9b, 0xfc, 0x00, 0x43, 0xa7, 0xa3, 0x1e, 0xec, 0xc6, 0x1e, 0x5f, 0xca, 0xb2, 0xc6, 0xcf,
	0x86, 0x2b, 0x11, 0x42, 0xd0, 0xcc, 0x92, 0x48, 0x56, 0x11, 0x41, 0x01, 0x46, 0x00, 0x9d, 0x88,
	0xf9, 0x1e, 0x27, 0x8c, 0xda, 0x5d, 0x38, 0xd4, 0xb7, 0x57, 0x0d, 0x1d, 0xc0, 0xff, 0xf3, 0x4a,
	0x3b, 0xf6, 0x0d, 0x98, 0xf3, 0x6a, 0x02, 0xea, 0x41, 0x8b, 0xd0, 0x00, 0xff, 0x96, 0xa5, 0x4c,
	0x37, 0x07, 0xe8, 0x0c, 0x5a, 0x52, 0x47, 0x75, 0x74, 0x38, 0x2c, 0x36, 0x32, 0xf7, 0xbd, 0xc8,
	0x4b, 0xdc, 0x9c, 0xb5, 0xdb, 0xb0, 0x3b, 0x23, 0x34, 0x94, 0x5f, 0x46, 0x43, 0x1b, 0xc1, 0xab,
	0x59, 0xb6, 0x88, 0x88, 0x3f, 0xc5, 0xeb, 0xa2, 0xe2, 0x57, 0xe8, 0x56, 0x62, 0xaa, 0xea, 0x3b,
	0x68, 0xc7, 0xd9, 0x62, 0x8a, 0xd7, 0x6a, 0xb0, 0x07, 0xba, 0xc0, 0x8c, 0x11, 0xca, 0x5d, 0xc5,
	0xda, 0x47, 0xd0, 0x9d, 0x25, 0xe4, 0xd1, 0xe3, 0xb8, 0xa2, 0xf8, 0x0d, 0x50, 0x35, 0xa8, 0x24,
	0xcf, 0xa1, 0x1d, 0x27, 0xa4, 0x94, 0xdc, 0xba, 0xb3, 0xa2, 0xc5, 0x48, 0xae, 0xd8, 0xaa, 0x94,
	0xfb, 0x04, 0xa6, 0xc2, 0x4a, 0xe9, 0x14, 0x5a, 0x3e, 0x7b, 0xf9, 0x6e, 0x39, 0x29, 0x64, 0xe4,
	0xbe, 0x0a, 0x99, 0x33, 0x30, 0x15, 0x2e, 0x27, 0x3b, 0xd1, 0x26, 0x35, 0xdc, 0x1c, 0x5c, 0xfe,
	0x69, 0xc2, 0xde, 0x55, 0x6e, 0x0f, 0xf4, 0x01, 0x3a, 0x62, 0x7c, 0x62, 0x74, 0xc8, 0xd4, 0xa6,
	0x11, 0x21, 0xab, 0x02, 0xc5, 0x60, 0x1b, 0xe8, 0x33, 0xec, 0x5d, 0x53, 0xc2, 0xc7, 0xd3, 0x09,
	0x3a, 0xd2, 0x5c, 0xf9, 0x5b, 0x58, 0xbd, 0x7a, 0x50, 0xad, 0xbf, 0x81, 0x46, 0xb0, 0x2f, 0xce,
	0x29, 0x5f, 0xa0, 0x37, 0x3a, 0xad, 0xee, 0x73, 0x6b, 0xb0, 0x4d, 0x68, 0x8d, 0x2f, 0xd0, 0x92,
	0xa6, 0x41, 0x7d, 0x9d, 0x54, 0x35, 0x95, 0xf5, 0x7a, 0x33, 0xac, 0x4f, 0x8e, 0xc1, 0xd0, 0xcb,
	0x47, 0x6f, 0xcb, 0x9e, 0x36, 0x4c, 0x62, 0x59, 0xcf, 0x51, 0x5a, 0x65, 0x02, 0x50, 0x2e, 0x1c,
	0x55, 0x72, 0x37, 0xad, 0x61, 0x1d, 0x3f, 0xcb, 0x69, 0xa1, 0xef, 0x62, 0xd5, 0x51, 0x84, 0x7d,
	0x4e, 0x1e, 0xa5, 0x56, 0xd9, 0x50, 0xd5, 0x12, 0x95, 0x86, 0x6a, 0xce, 0xc8, 0x47, 0x91, 0xbf,
	0x2a, 0xfd, 0xfa, 0x4f, 0xbe, 0x7d, 0xb2, 0x66, 0x06, 0xbb, 0x31, 0x7a, 0x7f, 0x7b, 0x1e, 0x12,
	0xbe, 0xcc, 0x16, 0x43, 0x9f, 0x3d, 0x38, 0x01, 0x0e, 0x48, 0xea, 0x04, 0x89, 0x47, 0x03, 0x47,
	0xbe, 0x72, 0x8b, 0xec, 0xbe, 0x78, 0x15, 0x17, 0x6d, 0x19, 0xf9, 0xf8, 0x37, 0x00, 0x00, 0xff,
	0xff, 0x77, 0x3f, 0x67, 0xe3, 0x2f, 0x05, 0x00, 0x00,
}
