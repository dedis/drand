/*
 * This protobuf file contains the services and message definitions of all
 * methods used by drand nodes to produce distributed randomness.
 *
*/
syntax = "proto3";

package drand;

/*option go_package = "github.com/drand/drand/protobuf/drand";*/
option go_package = "drand";

import "crypto/dkg/dkg.proto";
import "drand/empty.proto";

service Protocol {
    // Setup is doing the DKG setup phase
    rpc Setup(SetupPacket) returns (drand.Empty);
    // Reshare performs the resharing phase
    rpc Reshare(ResharePacket) returns (drand.Empty);
    // NewBeacon asks for a partial signature to another node
    rpc NewBeacon(BeaconPacket) returns (drand.Empty);
    rpc SyncChain(SyncRequest) returns (stream SyncResponse);
}

message BeaconPacket {
    // Round is the round for which the beacon will be created from the partial
    // signatures
    uint64 round = 1;
    // PreviousRound is the round for which the beacon is building on top of
    // from.
    uint64 previous_round = 2;
    bytes partial_sig = 3;
    bytes previous_sig = 4;
}

message SetupPacket {
    dkg.Packet dkg = 1;
}

// Reshare is a wrapper around a Setup packet for resharing operation that
// serves two purposes: - indicate to non-leader old nodes that they should
// generate and send their deals - indicate to which new group are we resharing.
// drand should keep a list of new ready-to-operate groups allowed.
message ResharePacket {
    dkg.Packet dkg = 1;
    string group_hash = 2;
}

// SyncRequest is from a node that needs to sync up with the current head of the
// chain
message SyncRequest {
    uint64 from_round = 1;
}

// SyncResponse is basically a chain of beacon response
message SyncResponse {
    uint64 previous_round = 1;
    bytes previous_sig = 2;
    uint64 round = 3;
    bytes signature = 4;
}
