// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drand/api.proto

package drand

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// PublicRandRequest requests a public random value that has been generated in a
// unbiasable way and verifiable.
type PublicRandRequest struct {
	// round uniquely identifies a beacon.
	Round uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	// if latest is true, the response will be the latest beacon the store have
	// regardless of the round indicated.
	Latest               bool     `protobuf:"varint,2,opt,name=latest,proto3" json:"latest,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicRandRequest) Reset()         { *m = PublicRandRequest{} }
func (m *PublicRandRequest) String() string { return proto.CompactTextString(m) }
func (*PublicRandRequest) ProtoMessage()    {}
func (*PublicRandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0cff3fc81cf7d79, []int{0}
}

func (m *PublicRandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicRandRequest.Unmarshal(m, b)
}
func (m *PublicRandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicRandRequest.Marshal(b, m, deterministic)
}
func (m *PublicRandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicRandRequest.Merge(m, src)
}
func (m *PublicRandRequest) XXX_Size() int {
	return xxx_messageInfo_PublicRandRequest.Size(m)
}
func (m *PublicRandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicRandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicRandRequest proto.InternalMessageInfo

func (m *PublicRandRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PublicRandRequest) GetLatest() bool {
	if m != nil {
		return m.Latest
	}
	return false
}

// PublicRandResponse holds a signature which is the random value. It can be
// verified thanks to the distributed public key of the nodes that have ran the
// DKG protocol and is unbiasable. The randomness can be verified using the BLS
// verification routine with the message "round || previous_rand".
type PublicRandResponse struct {
	Round             uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Signature         []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	PreviousSignature []byte `protobuf:"bytes,3,opt,name=previous_signature,json=previousSignature,proto3" json:"previous_signature,omitempty"`
	// randomness is simply there to demonstrate - it is the hash of the
	// signature. It should be computed locally.
	Randomness           []byte   `protobuf:"bytes,4,opt,name=randomness,proto3" json:"randomness,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicRandResponse) Reset()         { *m = PublicRandResponse{} }
func (m *PublicRandResponse) String() string { return proto.CompactTextString(m) }
func (*PublicRandResponse) ProtoMessage()    {}
func (*PublicRandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0cff3fc81cf7d79, []int{1}
}

func (m *PublicRandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicRandResponse.Unmarshal(m, b)
}
func (m *PublicRandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicRandResponse.Marshal(b, m, deterministic)
}
func (m *PublicRandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicRandResponse.Merge(m, src)
}
func (m *PublicRandResponse) XXX_Size() int {
	return xxx_messageInfo_PublicRandResponse.Size(m)
}
func (m *PublicRandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicRandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublicRandResponse proto.InternalMessageInfo

func (m *PublicRandResponse) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PublicRandResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PublicRandResponse) GetPreviousSignature() []byte {
	if m != nil {
		return m.PreviousSignature
	}
	return nil
}

func (m *PublicRandResponse) GetRandomness() []byte {
	if m != nil {
		return m.Randomness
	}
	return nil
}

// PrivateRandRequest is the message to send when requesting a private random
// value.
type PrivateRandRequest struct {
	// Request is the ECIES encryption of an ephemereal public key towards which
	// to encrypt the private randomness. The format of the bytes is denoted by
	// the ECIES encryption used by drand.
	Request              []byte   `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateRandRequest) Reset()         { *m = PrivateRandRequest{} }
func (m *PrivateRandRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateRandRequest) ProtoMessage()    {}
func (*PrivateRandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0cff3fc81cf7d79, []int{2}
}

func (m *PrivateRandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateRandRequest.Unmarshal(m, b)
}
func (m *PrivateRandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateRandRequest.Marshal(b, m, deterministic)
}
func (m *PrivateRandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateRandRequest.Merge(m, src)
}
func (m *PrivateRandRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateRandRequest.Size(m)
}
func (m *PrivateRandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateRandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateRandRequest proto.InternalMessageInfo

func (m *PrivateRandRequest) GetRequest() []byte {
	if m != nil {
		return m.Request
	}
	return nil
}

type PrivateRandResponse struct {
	// Responses is the ECIES encryption of the private randomness using the
	// ephemereal public key sent in the request.  The format of the bytes is
	// denoted by the ECIES  encryption used by drand.
	Response             []byte   `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateRandResponse) Reset()         { *m = PrivateRandResponse{} }
func (m *PrivateRandResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateRandResponse) ProtoMessage()    {}
func (*PrivateRandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0cff3fc81cf7d79, []int{3}
}

func (m *PrivateRandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateRandResponse.Unmarshal(m, b)
}
func (m *PrivateRandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateRandResponse.Marshal(b, m, deterministic)
}
func (m *PrivateRandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateRandResponse.Merge(m, src)
}
func (m *PrivateRandResponse) XXX_Size() int {
	return xxx_messageInfo_PrivateRandResponse.Size(m)
}
func (m *PrivateRandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateRandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateRandResponse proto.InternalMessageInfo

func (m *PrivateRandResponse) GetResponse() []byte {
	if m != nil {
		return m.Response
	}
	return nil
}

type HomeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HomeRequest) Reset()         { *m = HomeRequest{} }
func (m *HomeRequest) String() string { return proto.CompactTextString(m) }
func (*HomeRequest) ProtoMessage()    {}
func (*HomeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0cff3fc81cf7d79, []int{4}
}

func (m *HomeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HomeRequest.Unmarshal(m, b)
}
func (m *HomeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HomeRequest.Marshal(b, m, deterministic)
}
func (m *HomeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeRequest.Merge(m, src)
}
func (m *HomeRequest) XXX_Size() int {
	return xxx_messageInfo_HomeRequest.Size(m)
}
func (m *HomeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HomeRequest proto.InternalMessageInfo

type HomeResponse struct {
	Status               string   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HomeResponse) Reset()         { *m = HomeResponse{} }
func (m *HomeResponse) String() string { return proto.CompactTextString(m) }
func (*HomeResponse) ProtoMessage()    {}
func (*HomeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0cff3fc81cf7d79, []int{5}
}

func (m *HomeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HomeResponse.Unmarshal(m, b)
}
func (m *HomeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HomeResponse.Marshal(b, m, deterministic)
}
func (m *HomeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HomeResponse.Merge(m, src)
}
func (m *HomeResponse) XXX_Size() int {
	return xxx_messageInfo_HomeResponse.Size(m)
}
func (m *HomeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HomeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HomeResponse proto.InternalMessageInfo

func (m *HomeResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*PublicRandRequest)(nil), "drand.PublicRandRequest")
	proto.RegisterType((*PublicRandResponse)(nil), "drand.PublicRandResponse")
	proto.RegisterType((*PrivateRandRequest)(nil), "drand.PrivateRandRequest")
	proto.RegisterType((*PrivateRandResponse)(nil), "drand.PrivateRandResponse")
	proto.RegisterType((*HomeRequest)(nil), "drand.HomeRequest")
	proto.RegisterType((*HomeResponse)(nil), "drand.HomeResponse")
}

func init() {
	proto.RegisterFile("drand/api.proto", fileDescriptor_c0cff3fc81cf7d79)
}

var fileDescriptor_c0cff3fc81cf7d79 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0x4d, 0x53, 0xe2, 0x30,
	0x18, 0x9e, 0xb2, 0x50, 0xe0, 0x85, 0x9d, 0x5d, 0x5e, 0x76, 0xd8, 0xda, 0x71, 0x1c, 0xa6, 0x07,
	0x87, 0x8b, 0xc5, 0x8f, 0xab, 0x17, 0xd4, 0x83, 0xdc, 0x98, 0x72, 0xf3, 0xe2, 0x04, 0x1a, 0xb5,
	0x23, 0x4d, 0x6a, 0x92, 0xf2, 0x57, 0xfc, 0x51, 0xfe, 0x29, 0x87, 0x24, 0xb4, 0x45, 0xf0, 0xe2,
	0x2d, 0xcf, 0x47, 0x9e, 0xe4, 0x7d, 0x12, 0xf8, 0x13, 0x0b, 0xc2, 0xe2, 0x31, 0xc9, 0x92, 0x30,
	0x13, 0x5c, 0x71, 0x6c, 0x68, 0xc2, 0x47, 0xc3, 0x2f, 0x79, 0x9a, 0x72, 0x66, 0xa4, 0x60, 0x02,
	0xbd, 0x59, 0xbe, 0x58, 0x25, 0xcb, 0x88, 0xb0, 0x38, 0xa2, 0x6f, 0x39, 0x95, 0x0a, 0xff, 0x41,
	0x43, 0xf0, 0x9c, 0xc5, 0x9e, 0x33, 0x74, 0x46, 0xf5, 0xc8, 0x00, 0x1c, 0x80, 0xbb, 0x22, 0x8a,
	0x4a, 0xe5, 0xd5, 0x86, 0xce, 0xa8, 0x15, 0x59, 0x14, 0xbc, 0x3b, 0x80, 0xd5, 0x0c, 0x99, 0x71,
	0x26, 0xe9, 0x37, 0x21, 0xc7, 0xd0, 0x96, 0xc9, 0x33, 0x23, 0x2a, 0x17, 0x54, 0xe7, 0x74, 0xa3,
	0x92, 0xc0, 0x33, 0xc0, 0x4c, 0xd0, 0x75, 0xc2, 0x73, 0xf9, 0x58, 0xda, 0x7e, 0x69, 0x5b, 0x6f,
	0xab, 0xcc, 0x0b, 0xfb, 0x09, 0xc0, 0x66, 0x22, 0x9e, 0x32, 0x2a, 0xa5, 0x57, 0xd7, 0xb6, 0x0a,
	0x13, 0x84, 0x80, 0x33, 0x91, 0xac, 0x89, 0xa2, 0xd5, 0xe9, 0x3c, 0x68, 0x0a, 0xb3, 0xd4, 0x57,
	0xeb, 0x46, 0x5b, 0x18, 0x5c, 0x40, 0x7f, 0xc7, 0x6f, 0x27, 0xf1, 0xa1, 0x25, 0xec, 0xda, 0xee,
	0x28, 0x70, 0xf0, 0x1b, 0x3a, 0xf7, 0x3c, 0xa5, 0x36, 0x3b, 0x38, 0x85, 0xae, 0x81, 0x76, 0xeb,
	0x00, 0x5c, 0xa9, 0x88, 0xca, 0xa5, 0xde, 0xd8, 0x8e, 0x2c, 0xba, 0xfc, 0xa8, 0x81, 0x6b, 0x3a,
	0xc3, 0x09, 0x40, 0xd9, 0x1e, 0x7a, 0xa1, 0x7e, 0xa4, 0x70, 0xef, 0x51, 0xfc, 0xa3, 0x03, 0x8a,
	0x3d, 0x65, 0x0a, 0x7f, 0x4b, 0x76, 0xae, 0x04, 0x25, 0xe9, 0x8f, 0x82, 0xce, 0x1d, 0xbc, 0x83,
	0x4e, 0xa5, 0x02, 0x2c, 0xbc, 0x7b, 0x35, 0xfa, 0xfe, 0x21, 0xc9, 0x5e, 0xe8, 0x1a, 0xda, 0xb7,
	0x2f, 0x24, 0x61, 0x53, 0xf6, 0xc4, 0xf1, 0xbf, 0x35, 0x16, 0xcc, 0x36, 0x61, 0xf0, 0x55, 0x98,
	0x91, 0xe5, 0x2b, 0x55, 0x38, 0x86, 0xfa, 0xa6, 0x44, 0x44, 0xab, 0x57, 0x0a, 0xf6, 0xfb, 0x3b,
	0x9c, 0x39, 0xee, 0xa6, 0xf9, 0x60, 0x7e, 0xf8, 0xc2, 0xd5, 0x9f, 0xfa, 0xea, 0x33, 0x00, 0x00,
	0xff, 0xff, 0xd3, 0x98, 0xaa, 0xcb, 0x02, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PublicClient is the client API for Public service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicClient interface {
	// PublicRand is the method that returns the publicly verifiable randomness
	// generated by the drand network.
	PublicRand(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (*PublicRandResponse, error)
	PublicRandStream(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (Public_PublicRandStreamClient, error)
	// PrivateRand is the method that returns the private randomness generated
	// by the drand node only.
	PrivateRand(ctx context.Context, in *PrivateRandRequest, opts ...grpc.CallOption) (*PrivateRandResponse, error)
	// ChainInfo returns the information related to the chain this node
	// participates to
	ChainInfo(ctx context.Context, in *ChainInfoRequest, opts ...grpc.CallOption) (*ChainInfoPacket, error)
	// Home is a simple endpoint
	Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error)
}

type publicClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicClient(cc grpc.ClientConnInterface) PublicClient {
	return &publicClient{cc}
}

func (c *publicClient) PublicRand(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (*PublicRandResponse, error) {
	out := new(PublicRandResponse)
	err := c.cc.Invoke(ctx, "/drand.Public/PublicRand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) PublicRandStream(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (Public_PublicRandStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Public_serviceDesc.Streams[0], "/drand.Public/PublicRandStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &publicPublicRandStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Public_PublicRandStreamClient interface {
	Recv() (*PublicRandResponse, error)
	grpc.ClientStream
}

type publicPublicRandStreamClient struct {
	grpc.ClientStream
}

func (x *publicPublicRandStreamClient) Recv() (*PublicRandResponse, error) {
	m := new(PublicRandResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *publicClient) PrivateRand(ctx context.Context, in *PrivateRandRequest, opts ...grpc.CallOption) (*PrivateRandResponse, error) {
	out := new(PrivateRandResponse)
	err := c.cc.Invoke(ctx, "/drand.Public/PrivateRand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) ChainInfo(ctx context.Context, in *ChainInfoRequest, opts ...grpc.CallOption) (*ChainInfoPacket, error) {
	out := new(ChainInfoPacket)
	err := c.cc.Invoke(ctx, "/drand.Public/ChainInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicClient) Home(ctx context.Context, in *HomeRequest, opts ...grpc.CallOption) (*HomeResponse, error) {
	out := new(HomeResponse)
	err := c.cc.Invoke(ctx, "/drand.Public/Home", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicServer is the server API for Public service.
type PublicServer interface {
	// PublicRand is the method that returns the publicly verifiable randomness
	// generated by the drand network.
	PublicRand(context.Context, *PublicRandRequest) (*PublicRandResponse, error)
	PublicRandStream(*PublicRandRequest, Public_PublicRandStreamServer) error
	// PrivateRand is the method that returns the private randomness generated
	// by the drand node only.
	PrivateRand(context.Context, *PrivateRandRequest) (*PrivateRandResponse, error)
	// ChainInfo returns the information related to the chain this node
	// participates to
	ChainInfo(context.Context, *ChainInfoRequest) (*ChainInfoPacket, error)
	// Home is a simple endpoint
	Home(context.Context, *HomeRequest) (*HomeResponse, error)
}

// UnimplementedPublicServer can be embedded to have forward compatible implementations.
type UnimplementedPublicServer struct {
}

func (*UnimplementedPublicServer) PublicRand(ctx context.Context, req *PublicRandRequest) (*PublicRandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicRand not implemented")
}
func (*UnimplementedPublicServer) PublicRandStream(req *PublicRandRequest, srv Public_PublicRandStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PublicRandStream not implemented")
}
func (*UnimplementedPublicServer) PrivateRand(ctx context.Context, req *PrivateRandRequest) (*PrivateRandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrivateRand not implemented")
}
func (*UnimplementedPublicServer) ChainInfo(ctx context.Context, req *ChainInfoRequest) (*ChainInfoPacket, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainInfo not implemented")
}
func (*UnimplementedPublicServer) Home(ctx context.Context, req *HomeRequest) (*HomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Home not implemented")
}

func RegisterPublicServer(s *grpc.Server, srv PublicServer) {
	s.RegisterService(&_Public_serviceDesc, srv)
}

func _Public_PublicRand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicRandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).PublicRand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Public/PublicRand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).PublicRand(ctx, req.(*PublicRandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_PublicRandStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PublicRandRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicServer).PublicRandStream(m, &publicPublicRandStreamServer{stream})
}

type Public_PublicRandStreamServer interface {
	Send(*PublicRandResponse) error
	grpc.ServerStream
}

type publicPublicRandStreamServer struct {
	grpc.ServerStream
}

func (x *publicPublicRandStreamServer) Send(m *PublicRandResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Public_PrivateRand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateRandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).PrivateRand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Public/PrivateRand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).PrivateRand(ctx, req.(*PrivateRandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_ChainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).ChainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Public/ChainInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).ChainInfo(ctx, req.(*ChainInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Public_Home_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicServer).Home(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Public/Home",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicServer).Home(ctx, req.(*HomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Public_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drand.Public",
	HandlerType: (*PublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublicRand",
			Handler:    _Public_PublicRand_Handler,
		},
		{
			MethodName: "PrivateRand",
			Handler:    _Public_PrivateRand_Handler,
		},
		{
			MethodName: "ChainInfo",
			Handler:    _Public_ChainInfo_Handler,
		},
		{
			MethodName: "Home",
			Handler:    _Public_Home_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PublicRandStream",
			Handler:       _Public_PublicRandStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "drand/api.proto",
}
