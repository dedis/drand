// Code generated by protoc-gen-go. DO NOT EDIT.
// source: drand/public.proto

package drand // import "github.com/dedis/drand/protobuf/drand"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import crypto "github.com/dedis/drand/protobuf/crypto"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PublicRandRequest requests a public random value that has been generated in a
// unbiasable way and verifiable.
type PublicRandRequest struct {
	// round uniquely identifies a beacon. If round == 0, then the response will
	// contain the last.
	// XXX better ways to do that...
	Round                uint64   `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicRandRequest) Reset()         { *m = PublicRandRequest{} }
func (m *PublicRandRequest) String() string { return proto.CompactTextString(m) }
func (*PublicRandRequest) ProtoMessage()    {}
func (*PublicRandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_public_ab9ec56f723e8763, []int{0}
}
func (m *PublicRandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicRandRequest.Unmarshal(m, b)
}
func (m *PublicRandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicRandRequest.Marshal(b, m, deterministic)
}
func (dst *PublicRandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicRandRequest.Merge(dst, src)
}
func (m *PublicRandRequest) XXX_Size() int {
	return xxx_messageInfo_PublicRandRequest.Size(m)
}
func (m *PublicRandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicRandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicRandRequest proto.InternalMessageInfo

func (m *PublicRandRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

// PublicRandResponse holds a signature which is the random value. It can be
// verified thanks to the distributed public key of the nodes that have ran the
// DKG protocol and is unbiasable. The randomness can be verified using the BLS
// verification routine with the message "round || previous_rand".
type PublicRandResponse struct {
	Round                uint64        `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
	Previous             []byte        `protobuf:"bytes,2,opt,name=previous,proto3" json:"previous,omitempty"`
	Signature            *crypto.Point `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Randomness           []byte        `protobuf:"bytes,4,opt,name=randomness,proto3" json:"randomness,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *PublicRandResponse) Reset()         { *m = PublicRandResponse{} }
func (m *PublicRandResponse) String() string { return proto.CompactTextString(m) }
func (*PublicRandResponse) ProtoMessage()    {}
func (*PublicRandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_public_ab9ec56f723e8763, []int{1}
}
func (m *PublicRandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicRandResponse.Unmarshal(m, b)
}
func (m *PublicRandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicRandResponse.Marshal(b, m, deterministic)
}
func (dst *PublicRandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicRandResponse.Merge(dst, src)
}
func (m *PublicRandResponse) XXX_Size() int {
	return xxx_messageInfo_PublicRandResponse.Size(m)
}
func (m *PublicRandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicRandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PublicRandResponse proto.InternalMessageInfo

func (m *PublicRandResponse) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

func (m *PublicRandResponse) GetPrevious() []byte {
	if m != nil {
		return m.Previous
	}
	return nil
}

func (m *PublicRandResponse) GetSignature() *crypto.Point {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PublicRandResponse) GetRandomness() []byte {
	if m != nil {
		return m.Randomness
	}
	return nil
}

// PrivateRandRequest is the message to send when requesting a private random
// value.
type PrivateRandRequest struct {
	// Request must contains a public key towards which to encrypt the private
	// randomness.
	Request              *ECIESObject `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PrivateRandRequest) Reset()         { *m = PrivateRandRequest{} }
func (m *PrivateRandRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateRandRequest) ProtoMessage()    {}
func (*PrivateRandRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_public_ab9ec56f723e8763, []int{2}
}
func (m *PrivateRandRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateRandRequest.Unmarshal(m, b)
}
func (m *PrivateRandRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateRandRequest.Marshal(b, m, deterministic)
}
func (dst *PrivateRandRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateRandRequest.Merge(dst, src)
}
func (m *PrivateRandRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateRandRequest.Size(m)
}
func (m *PrivateRandRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateRandRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateRandRequest proto.InternalMessageInfo

func (m *PrivateRandRequest) GetRequest() *ECIESObject {
	if m != nil {
		return m.Request
	}
	return nil
}

type PrivateRandResponse struct {
	// Response contains the private randomness encrypted towards the client's
	// request key.
	Response             *ECIESObject `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *PrivateRandResponse) Reset()         { *m = PrivateRandResponse{} }
func (m *PrivateRandResponse) String() string { return proto.CompactTextString(m) }
func (*PrivateRandResponse) ProtoMessage()    {}
func (*PrivateRandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_public_ab9ec56f723e8763, []int{3}
}
func (m *PrivateRandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateRandResponse.Unmarshal(m, b)
}
func (m *PrivateRandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateRandResponse.Marshal(b, m, deterministic)
}
func (dst *PrivateRandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateRandResponse.Merge(dst, src)
}
func (m *PrivateRandResponse) XXX_Size() int {
	return xxx_messageInfo_PrivateRandResponse.Size(m)
}
func (m *PrivateRandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateRandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateRandResponse proto.InternalMessageInfo

func (m *PrivateRandResponse) GetResponse() *ECIESObject {
	if m != nil {
		return m.Response
	}
	return nil
}

type ECIESObject struct {
	Ephemeral            *crypto.Point `protobuf:"bytes,1,opt,name=ephemeral,proto3" json:"ephemeral,omitempty"`
	Ciphertext           []byte        `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Nonce                []byte        `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ECIESObject) Reset()         { *m = ECIESObject{} }
func (m *ECIESObject) String() string { return proto.CompactTextString(m) }
func (*ECIESObject) ProtoMessage()    {}
func (*ECIESObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_public_ab9ec56f723e8763, []int{4}
}
func (m *ECIESObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ECIESObject.Unmarshal(m, b)
}
func (m *ECIESObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ECIESObject.Marshal(b, m, deterministic)
}
func (dst *ECIESObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ECIESObject.Merge(dst, src)
}
func (m *ECIESObject) XXX_Size() int {
	return xxx_messageInfo_ECIESObject.Size(m)
}
func (m *ECIESObject) XXX_DiscardUnknown() {
	xxx_messageInfo_ECIESObject.DiscardUnknown(m)
}

var xxx_messageInfo_ECIESObject proto.InternalMessageInfo

func (m *ECIESObject) GetEphemeral() *crypto.Point {
	if m != nil {
		return m.Ephemeral
	}
	return nil
}

func (m *ECIESObject) GetCiphertext() []byte {
	if m != nil {
		return m.Ciphertext
	}
	return nil
}

func (m *ECIESObject) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicRandRequest)(nil), "drand.PublicRandRequest")
	proto.RegisterType((*PublicRandResponse)(nil), "drand.PublicRandResponse")
	proto.RegisterType((*PrivateRandRequest)(nil), "drand.PrivateRandRequest")
	proto.RegisterType((*PrivateRandResponse)(nil), "drand.PrivateRandResponse")
	proto.RegisterType((*ECIESObject)(nil), "drand.ECIESObject")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RandomnessClient is the client API for Randomness service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RandomnessClient interface {
	Public(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (*PublicRandResponse, error)
	Private(ctx context.Context, in *PrivateRandRequest, opts ...grpc.CallOption) (*PrivateRandResponse, error)
}

type randomnessClient struct {
	cc *grpc.ClientConn
}

func NewRandomnessClient(cc *grpc.ClientConn) RandomnessClient {
	return &randomnessClient{cc}
}

func (c *randomnessClient) Public(ctx context.Context, in *PublicRandRequest, opts ...grpc.CallOption) (*PublicRandResponse, error) {
	out := new(PublicRandResponse)
	err := c.cc.Invoke(ctx, "/drand.Randomness/Public", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *randomnessClient) Private(ctx context.Context, in *PrivateRandRequest, opts ...grpc.CallOption) (*PrivateRandResponse, error) {
	out := new(PrivateRandResponse)
	err := c.cc.Invoke(ctx, "/drand.Randomness/Private", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RandomnessServer is the server API for Randomness service.
type RandomnessServer interface {
	Public(context.Context, *PublicRandRequest) (*PublicRandResponse, error)
	Private(context.Context, *PrivateRandRequest) (*PrivateRandResponse, error)
}

func RegisterRandomnessServer(s *grpc.Server, srv RandomnessServer) {
	s.RegisterService(&_Randomness_serviceDesc, srv)
}

func _Randomness_Public_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicRandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomnessServer).Public(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Randomness/Public",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomnessServer).Public(ctx, req.(*PublicRandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Randomness_Private_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateRandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RandomnessServer).Private(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drand.Randomness/Private",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RandomnessServer).Private(ctx, req.(*PrivateRandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Randomness_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drand.Randomness",
	HandlerType: (*RandomnessServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Public",
			Handler:    _Randomness_Public_Handler,
		},
		{
			MethodName: "Private",
			Handler:    _Randomness_Private_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drand/public.proto",
}

func init() { proto.RegisterFile("drand/public.proto", fileDescriptor_public_ab9ec56f723e8763) }

var fileDescriptor_public_ab9ec56f723e8763 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0x4d, 0x8f, 0xd3, 0x30,
	0x10, 0x55, 0x16, 0xf6, 0x83, 0x49, 0x85, 0xb4, 0xb3, 0x8b, 0x08, 0x11, 0x42, 0x55, 0x04, 0xa2,
	0xac, 0x56, 0x89, 0x54, 0x6e, 0x1c, 0x17, 0xf5, 0xc0, 0x89, 0xca, 0x9c, 0xd8, 0x5b, 0x3e, 0x86,
	0xd6, 0x28, 0xb1, 0xbd, 0xb6, 0x53, 0x81, 0x10, 0x17, 0xfe, 0x02, 0xff, 0x0c, 0xfe, 0x02, 0x3f,
	0x04, 0xd5, 0xf6, 0x86, 0x40, 0x2b, 0x6e, 0x7e, 0x9e, 0xe7, 0x37, 0xcf, 0x6f, 0x06, 0xb0, 0xd1,
	0xa5, 0x68, 0x0a, 0xd5, 0x57, 0x2d, 0xaf, 0x73, 0xa5, 0xa5, 0x95, 0x78, 0xe8, 0xee, 0xd2, 0xf3,
	0x5a, 0x7f, 0x56, 0x56, 0x16, 0xd4, 0x52, 0x47, 0xc2, 0xfa, 0x62, 0xfa, 0x78, 0x25, 0xe5, 0xaa,
	0xa5, 0xa2, 0x54, 0xbc, 0x28, 0x85, 0x90, 0xb6, 0xb4, 0x5c, 0x0a, 0xe3, 0xab, 0xd9, 0x0b, 0x38,
	0x5d, 0x3a, 0x29, 0x56, 0x8a, 0x86, 0xd1, 0x4d, 0x4f, 0xc6, 0xe2, 0x39, 0x1c, 0x6a, 0xd9, 0x8b,
	0x26, 0x89, 0xa6, 0xd1, 0xec, 0x2e, 0xf3, 0x20, 0xdb, 0x00, 0x8e, 0xa9, 0x46, 0x49, 0x61, 0x68,
	0x3f, 0x17, 0x53, 0x38, 0x51, 0x9a, 0x36, 0x5c, 0xf6, 0x26, 0x39, 0x98, 0x46, 0xb3, 0x09, 0x1b,
	0x30, 0xe6, 0x00, 0x5b, 0xbb, 0xb2, 0x13, 0x64, 0x4c, 0x72, 0x67, 0x1a, 0xcd, 0xe2, 0xf9, 0xfd,
	0xfc, 0xd6, 0xf4, 0x52, 0x72, 0x61, 0xd9, 0x88, 0x91, 0x5d, 0x01, 0x2e, 0x35, 0xdf, 0x94, 0x96,
	0xc6, 0x1e, 0x2f, 0xe1, 0x58, 0xfb, 0xa3, 0xeb, 0x1c, 0xcf, 0x31, 0x77, 0x29, 0xe4, 0x8b, 0xd7,
	0x6f, 0x16, 0xef, 0xde, 0x56, 0x1f, 0xa9, 0xb6, 0xec, 0x96, 0x92, 0x2d, 0xe0, 0xec, 0x2f, 0x8d,
	0x60, 0x3e, 0x87, 0x13, 0x1d, 0xce, 0xff, 0x51, 0x19, 0x38, 0xd9, 0x0d, 0xc4, 0xa3, 0x02, 0x5e,
	0xc2, 0x3d, 0x52, 0x6b, 0xea, 0x48, 0x97, 0x6d, 0x78, 0xff, 0xef, 0x47, 0xfe, 0x10, 0xf0, 0x09,
	0x40, 0xcd, 0xd5, 0x9a, 0xb4, 0xa5, 0x4f, 0x36, 0xa4, 0x32, 0xba, 0xd9, 0x26, 0x29, 0xa4, 0xa8,
	0xc9, 0x45, 0x32, 0x61, 0x1e, 0xcc, 0x7f, 0x44, 0x00, 0x6c, 0x08, 0x03, 0x39, 0x1c, 0xf9, 0x21,
	0x60, 0x12, 0x9c, 0xee, 0x8c, 0x2f, 0x7d, 0xb4, 0xa7, 0x12, 0x3e, 0x70, 0xf1, 0xed, 0xe7, 0xaf,
	0xef, 0x07, 0x4f, 0x31, 0x76, 0xeb, 0xe0, 0x97, 0xe8, 0xfa, 0x01, 0x9e, 0x8d, 0x60, 0xf1, 0xc5,
	0x8d, 0xf0, 0x2b, 0xbe, 0x87, 0xe3, 0x90, 0x19, 0x0e, 0x8a, 0x3b, 0x73, 0x48, 0xd3, 0x7d, 0xa5,
	0xd0, 0xed, 0xa1, 0xeb, 0x76, 0x9a, 0x4d, 0xbc, 0xbc, 0x67, 0xbc, 0x8a, 0x2e, 0xae, 0x9e, 0x5f,
	0x3f, 0x5b, 0x71, 0xbb, 0xee, 0xab, 0xbc, 0x96, 0x5d, 0xd1, 0x50, 0xc3, 0x4d, 0x11, 0xf6, 0x7a,
	0xbb, 0x95, 0x55, 0xff, 0xc1, 0xc3, 0xea, 0xc8, 0xe1, 0x97, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x8f, 0x5f, 0x33, 0x3a, 0xf6, 0x02, 0x00, 0x00,
}
