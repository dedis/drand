# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    working_directory: /go/src/github.com/drand/drand
    docker:
      # specify the version
      - image: circleci/golang:latest
    environment:
        # special env for tests to wait a bit longer between phases 
        CIRCLE_CI: on
      
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    steps:
      - checkout
      - run: go get -v -t -d ./...
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Unit tests
          command: |
            mkdir /tmp/test-results
            trap "go-junit-report </tmp/test-results/go-test.out > /tmp/test-results/go-test-report.xml" EXIT
            make test-unit | tee /tmp/test-results/go-test.out
      - run: make test-integration
      - store_test_results:
          path: /tmp/test-results
  coverage:
    working_directory: /go/src/github.com/drand/drand
    docker:
      # specify the version
      - image: circleci/golang:latest
    environment:
        # special env for tests to wait a bit longer between phases 
        CIRCLE_CI: on
    steps:
      - checkout
      - run: go get -u github.com/ory/go-acc
      - run: go get -v -t -d ./...
      - run: go-acc ./...
      - run: bash <(curl -s https://codecov.io/bash)
  deploy:
    docker:
      - image: circleci/golang:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push Docker image
          command: |
            docker build --build-arg version=`git describe --tags` --build-arg gitCommit=`git rev-parse HEAD` -t drandorg/go-drand:latest .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push drandorg/go-drand:latest
  tagged-deploy:
    docker:
      - image: circleci/golang:latest
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and push tagged Docker image
          command: |
            docker build --build-arg version=`git describe --tags` --build-arg gitCommit=`git rev-parse HEAD` -t drandorg/go-drand:`git describe --tags` .
            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin
            docker push drandorg/go-drand:`git describe --tags`

workflows:
  version: 2
  build-deploy:
    jobs:
      - build
      - coverage
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
  tagged-build:
    jobs:
      - tagged-deploy:
          filters:
            # ignore any commit on any branch by default
            branches:
              ignore: /.*/
            # only act on version tags
            tags:
              only: /^v[0-9]+(\.[0-9]+)*$/
